# 33: Digit Cancelling Fractions
# Find the four non-trivial fractions where the second digit
#  of the numerator and denomenator cancel
#  and give the denominator of their simplified product

# Method:
# generate all fractions less than one with two digits in num and denom
# simplify and check if their second digits cancel and aren't both 0

fractions = [[n,d] for d in range(10,100) for n in range(10,d)\
    if str(n).count("0") == 0 and str(d).count("0") == 0]

cancels = []

for [n,d] in fractions:
    for i in range(2):
        for j in range(2):
            if str(n)[i] == str(d)[j]:
                if int(str(n)[i-1])/int(str(d)[j-1]) == n/d:
                    cancels.append([n,d])
                    print(f'{n}/{d}')

product = [1,1]

for [n,d] in cancels:
    product[0] *= n
    product[1] *= d

print(f'{product[0]}/{product[1]}')

for c in range(min(product),0,-1):
    if product[0] % c == 0 and product[i] % c == 0:
        print(int(product[1]/c))
        break